import Order from "../../models/order";

export const ADD_ORDER = "ADD_ORDER";
export const SET_ORDERS = "SET_ORDERS";

export const fetchOrders = () => {
  return async (dispatch) => {
    // this is using redux thunk

    /**
     * we use a try catch block to handle the fetching errors
     */
    try {
      const response = await fetch(
        "https://rn-shop-app-1b7bc.firebaseio.com/orders/u1.json", // we are using the u1 to be a hard coded value of the user
        {
          /**
           * it is default as a GET request
           * we don't need any headers or a body
           */
        }
      );

      if (!response.ok) {
        // checks if response is within the http 200 status range
        throw new Error("Something went wrong!");
      }

      // this is also an async task
      const responseData = await response.json();

      const loadedOrders = []; // we initialize this empty array to get each item from the response object

      for (const key in responseData) {
        // we look through the response object and create a new product
        loadedOrders.push(
          new Order(
            key, // the key is essential the id that is generated by firebase
            responseData[key].cartItems,
            responseData[key].totalAmount,
            // we wrap this in a Date object creation because what is returned from firebase is a string
            new Date(responseData[key].date)
          )
        );
      }
      dispatch({
        type: SET_ORDERS,
        orders: loadedOrders,
      });
    } catch (error) {
      throw error;
    }
  };
};

export const addOrder = (cartItems, totalAmount) => {
  return async (dispatch) => {
    const date = new Date(); // we create this so we can have the same time stamp to the backend and to the local app
    const response = await fetch(
      "https://rn-shop-app-1b7bc.firebaseio.com/orders/u1.json", // we'll be hitting the orders node with our user id
      {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          cartItems,
          totalAmount,
          date: date.toISOString(), // this will convert with the IOS standard
        }),
      }
    );

    if (!response.ok) {
      throw new Error("Something went wrong!");
    }
    // this is also an async task
    const responseData = await response.json();

    dispatch({
      type: ADD_ORDER,
      orderData: {
        id: responseData.name, // this is generated from firebase
        items: cartItems,
        amount: totalAmount,
        date: date,
      },
    });
  };
};
